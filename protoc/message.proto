syntax = "proto3";

package message;

// 定义 VerifyService 服务，其中包含用于验证码验证的 RPC 方法
service VerifyService {
  // 定义名为 GetVarifyCode 的 RPC 方法，接收 GetVarifyReq 消息并返回 GetVarifyRsp 消息
  rpc GetVerifyCode (GetVerifyReq) returns (GetVerifyRsp) {}
}

// 定义 GetVarifyCode RPC 方法的请求消息
message GetVerifyReq {
  string email = 1; // 要发送验证码的电子邮件地址
}

// 定义 GetVarifyCode RPC 方法的响应消息
message GetVerifyRsp {
  int32 error = 1;  // 错误码 (0 表示成功，非零表示失败)
  string email = 2; // 与请求相关联的电子邮件地址，通常回传以确认
  string code = 3;  // 为该电子邮件地址生成的验证码
}


message GetChatServerReq {
  int32 uid = 1;
}
 
 message GetChatServerRsp {
  int32 error = 1;                                                                                                                                                      
  string host = 2;
  string port = 3;
  string chatserver = 4;
  string token = 5;
}

message LoginReq {
  int32 uid = 1;
  string chatserver = 2;
}

message LoginRsp {
  int32 error = 1;
}


service StatusService {
  rpc GetChatServer (GetChatServerReq) returns (GetChatServerRsp) {}
  rpc Login(LoginReq) returns (LoginRsp) {}
}



message AddFriendReq {
	int32  applyuid = 1;
	string name = 2;
	string desc = 3;
	string icon = 4;
	string nick = 5;
	int32  sex = 6;
	int32  touid = 7;
}

message AddFriendRsp {
	int32 error = 1;
	int32 applyuid = 2;
	int32 touid = 3;
}

message RplyFriendReq {
	int32 rplyuid = 1;
	bool  agree = 2;
	int32 touid = 3;
}

message RplyFriendRsp {
	int32 error = 1;
	int32 rplyuid = 2;
	int32 touid = 3;
}

message SendChatMsgReq{
		int32 fromuid = 1;
		int32 touid = 2;
		string message = 3;
}

message SendChatMsgRsp{
		int32 error = 1;
		int32 fromuid = 2;
		int32 touid = 3;
}

message AuthFriendReq{
	int32 fromuid = 1;
	int32 touid = 2;
}

message AuthFriendRsp{
	int32 error = 1;
	int32 fromuid = 2;
	int32 touid = 3;
}

message TextChatMsgReq {
	int32 fromuid = 1;
    int32 touid = 2;
	repeated TextChatData textmsgs = 3;
}

message TextChatData{
	string msgid = 1;
	string msgcontent = 2;
}

message TextChatMsgRsp {
	int32 error = 1;
	int32 fromuid = 2;
	int32 touid = 3; 
	repeated TextChatData textmsgs = 4;
}

service ChatService {
	rpc NotifyAddFriend(AddFriendReq) returns (AddFriendRsp) {}
	rpc RplyAddFriend(RplyFriendReq) returns (RplyFriendRsp) {}
	rpc SendChatMsg(SendChatMsgReq) returns (SendChatMsgRsp) {}
	rpc NotifyAuthFriend(AuthFriendReq) returns (AuthFriendRsp) {}
	rpc NotifyTextChatMsg(TextChatMsgReq) returns (TextChatMsgRsp){}
}

